//A program to solve a Sudoku puzzle.
//Backtracking Solution

class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
	
	bool solve(vector<vector<char>>& board){
      for(int i = 0; i < board.size(); i++){
        for(int j = 0; j < board[0].size(); j++){
        
          if(board[i][j] == '.'){
            for(char c = '1'; c <= '9' ; c++){
			
              if(isvalid(board, i, j, c)){
                board[i][j] = c;
                
                if(solve(board) == true){
                  return true;
                }
                else{
                  board[i][j] = '.';
                }
              }
            }
             return false;
          }
        }
      }
      return true;
  }
 
  bool isvalid(vector<vector<char>>& board, int row, int col, char num){//function to check if we are inside the boundaries.
 
    for(int i = 0; i < 9; i++){
	 
      if(board[i][col] == num){
        return false;
      }
	 
      if(board[row][i] == num){
        return false;
      }
	

      if(board[3 * (row / 3)+ i / 3][3 * (col / 3 ) + i % 3] == num){
        return false;
      }
    }
    return true;
  }
};
